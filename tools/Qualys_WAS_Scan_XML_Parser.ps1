function Generate-QualysReport {
    <#
        .SYNOPSIS
        Small tool to process XML files from Qualys WAS scans.
        Import he script and then run it.
            
        .PARAMETER XmlFilePath
        Path to your XML file from a Qualys WAS scan

        .PARAMETER GenerateHtml
        Specify if you also want an HTML report

        .EXAMPLE
        generate-QualysReport -XmlFilePath .\scan.xml

        .EXAMPLE
        generate-QualysReport -XmlFilePath .\scan.xml  -GenerateHtml

        .EXAMPLE
        generate-QualysReport -XmlFilePath .\scan.xml  -GenerateHtml -HtmlOutputFile test.html

        .NOTES
        The template in Qualys needs to use a Dynamic Search List with the following settings:
        Search Criteria: 
            Confirmed Severity -> Level 2, Level 3, Level 4, Level 5
            Potential Severity -> Level 2, Level 3, Level 4, Level 5
        Ofcourse you can also add Level 1, or just Level 5.
        Then head over an generate your report and export as XML. This can then be fed into the script.

        License: BSD 3-Clause
    #>
    
    param (
        [Parameter(Mandatory = $true)]
        [string]$XmlFilePath,

        [switch]$GenerateHtml,

        [string]$HtmlOutputFile = $null  # New parameter for HTML output filename
    )

    # Load the XML file
    [xml]$xmlContent = Get-Content -Path $XmlFilePath

    # Extract the web_application from the target area
    $webApplication = $xmlContent.WAS_WEBAPP_REPORT.TARGET.WEB_APPLICATIONS.WEB_APPLICATION

    # Initialize severity counters
    $severityCounts = @{
        '5' = 0
        '4' = 0
        '3' = 0
        '2' = 0
        '1' = 0
    }

    # Create a hash table to store aggregated vulnerabilities
    $vulnerabilities = @{}

    # Iterate over each vulnerability in the vulnerability_list
    foreach ($vuln in $xmlContent.WAS_WEBAPP_REPORT.RESULTS.WEB_APPLICATION.VULNERABILITY_LIST.VULNERABILITY) {
        # Get URL and handle CDATA
        if ($vuln.url.'#cdata-section') {
            $url =  $vuln.url.'#cdata-section'  
        } else {
            $url = $vuln.url
        }

        # Get Payload and handle CDATA
        if ($vuln.PAYLOADS.PAYLOAD.PAYLOAD.'#cdata-section') {
            $payload = $vuln.PAYLOADS.PAYLOAD.PAYLOAD.'#cdata-section'
        } else {
            $payload = $vuln.PAYLOADS.PAYLOAD.PAYLOAD
        }

        # Get QID and Parameter
        $qid = $vuln.qid
        $param = $vuln.param

        # Retrieve the QID details
        $qidDetails = $xmlContent.WAS_WEBAPP_REPORT.GLOSSARY.QID_LIST.qid | Where-Object { $_.qid -eq $qid }

        # Get Description and handle CDATA
        if ($qidDetails.DESCRIPTION.'#cdata-section') {
            $description = $qidDetails.DESCRIPTION.'#cdata-section'
        } else {
            $description = $qidDetails.DESCRIPTION
        }
        
        # Get Impact and handle CDATA
        if ($qidDetails.impact.'#cdata-section') {
            $impact = $qidDetails.impact.'#cdata-section'
        } else {
            $impact = $qidDetails.impact
        }

        # Get Solution and handle CDATA
        if ($qidDetails.SOLUTION.'#cdata-section') {
            $solution = $qidDetails.SOLUTION.'#cdata-section'
        } else {
            $solution = $qidDetails.SOLUTION
        }

        # Get Severity, Title and Categoriy
        $severity = $qidDetails.SEVERITY
        $title = $qidDetails.TITLE
        $category = $qidDetails.category
        
        # Use the $tile of the qid as unique identifier and Check if it already exists in the hash table
        if ($vulnerabilities.ContainsKey($title)) {
            # Append the unique payload and parameter to the existing entry
            if (-not $vulnerabilities[$title].Payload.Contains($payload)) {
                $vulnerabilities[$title].Payload += "`n$payload"
            }
            if (-not $vulnerabilities[$title].Parameter.Contains($param)) {
                $vulnerabilities[$title].Parameter += ", $param"
            }
            if (-not $vulnerabilities[$title].Url.Contains($url)) {
                $vulnerabilities[$title].Url += "`n$url"
            }
        } else {
            # Add a new entry to the hash table
            $vulnerabilities[$title] = [PSCustomObject]@{
                Title       = $title
                Severity    = $severity
                Category    = $category
                Description = $description
                Impact      = $impact
                Solution    = $solution
                URL         = $url
                Parameter   = $param
                Payload     = $payload
            }
            # Increment the severity counter for the current severity
            $severityCounts[$severity]++
        }
    }

    # Create the overview object
    $overview = [PSCustomObject]@{
        WebApplication = $webApplication
        Urgent = $severityCounts['5']
        Critical = $severityCounts['4']
        Serious = $severityCounts['3']
        Medium = $severityCounts['2']
        Minimal = $severityCounts['1']
        Sensitive_Content = $summary.SENSITIVE_CONTENT
        Information_Gathered = $summary.INFORMATION_GATHERED
        Vulnerabilities = @()
    }

   

    # Add the aggregated vulnerabilities to the overview and sort by severity
    $overview.Vulnerabilities = $vulnerabilities.Values |
        Sort-Object -Property Severity -Descending

    # Output the overview (formatted list output)
    cls
    $overview | Format-List -Property WebApplication, Urgent, Critical, Serious, Medium, Minimal
    $overview.Vulnerabilities

    # Generate HTML content if the switch is specified
    if ($GenerateHtml) {
        $html = @"
        <!DOCTYPE html>
        <html>
        <head>
            <title>Vulnerability Report</title>
            <style>
                body { font-family: Arial, sans-serif; background-color: #4f4f4f; color: #fff; }
                .webapp { font-size: 1.5em; font-weight: bold; margin-bottom: 20px; }
                .summary { margin-bottom: 20px; }
                .filter { margin-bottom: 20px; }
                .vulnerability { margin-bottom: 10px; border: 1px solid #ccc; padding: 10px; background-color: #4f4f4f; color: #fff; } /* Changed to light grey */
                .vulnerability h3 { margin: 0; }
                .details { margin-left: 20px; }
                .severity-5 { color: red; }
                .severity-4 { color: orange; }
                .severity-3 { color: yellow; }
                .severity-2 { color: green; }
                .severity-1 { color: blue; }
            </style>
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
            <script>
                document.addEventListener("DOMContentLoaded", function() {
                    var ctx = document.getElementById('severityChart').getContext('2d');
                    var chart = new Chart(ctx, {
                        type: 'pie',
                        data: {
                            labels: ['Urgent', 'Critical', 'Serious', 'Medium', 'Minimal'],
                            datasets: [{
                                label: 'Severity',
                                data: [$($overview.Urgent), $($overview.Critical), $($overview.Serious), $($overview.Medium), $($overview.Minimal)],
                                backgroundColor: ['red', 'orange', 'yellow', 'green', 'blue']
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    position: 'bottom',
                                    labels: {
                                        color: '#fff'
                                    }
                                }
                            }
                        }
                    });

                    function filterVulnerabilities() {
                        var confirmed = document.getElementById('confirmed').checked;
                        var potential = document.getElementById('potential').checked;

                        var elements = document.getElementsByClassName('vulnerability');
                        var counts = { '5': 0, '4': 0, '3': 0, '2': 0, '1': 0 };

                        for (var i = 0; i < elements.length; i++) {
                            var category = elements[i].getAttribute('data-category');
                            var severity = elements[i].querySelector('.severity').textContent.trim();

                            if ((confirmed && category === 'Confirmed Vulnerability') || (potential && category === 'Potential Vulnerability')) {
                                elements[i].style.display = '';
                                counts[severity]++;
                            } else {
                                elements[i].style.display = 'none';
                            }
                        }

                        // Update chart data based on filtered vulnerabilities
                        chart.data.datasets[0].data = [
                            counts['5'], 
                            counts['4'], 
                            counts['3'], 
                            counts['2'], 
                            counts['1']
                        ];
                        chart.update();

                        // Update text-based summary counts
                        document.getElementById('urgentCount').textContent = counts['5'];
                        document.getElementById('criticalCount').textContent = counts['4'];
                        document.getElementById('seriousCount').textContent = counts['3'];
                        document.getElementById('mediumCount').textContent = counts['2'];
                        document.getElementById('minimalCount').textContent = counts['1'];
                    }

                    document.getElementById('confirmed').addEventListener('change', filterVulnerabilities);
                    document.getElementById('potential').addEventListener('change', filterVulnerabilities);

                    filterVulnerabilities();  // Initial call to set up chart and display based on initial checkbox state
                });
            </script>


        </head>
        <body>
            <div class="webapp">Web Application: $($overview.WebApplication)</div>
            <div class="summary">
                <p style="color: red;"><strong>Urgent:</strong> <span id="urgentCount">$($overview.Urgent)</span></p>
                <p style="color: orange;"><strong>Critical:</strong> <span id="criticalCount">$($overview.Critical)</span></p>
                <p style="color: yellow;"><strong>Serious:</strong> <span id="seriousCount">$($overview.Serious)</span></p>
                <p style="color: green;"><strong>Medium:</strong> <span id="mediumCount">$($overview.Medium)</span></p>
                <p style="color: blue;"><strong>Minimal:</strong> <span id="minimalCount">$($overview.Minimal)</span></p>
            </div>
            <div class="summary">
                <canvas id="severityChart" width="400" height="400"></canvas>
            </div>
            <div class="filter">
                <label><input type="checkbox" id="confirmed" checked> Confirmed Vulnerabilities</label>
                <label><input type="checkbox" id="potential" checked> Potential Vulnerabilities</label>
            </div>
"@

        # Add vulnerabilities to the HTML
        foreach ($vuln in $overview.Vulnerabilities) {
            # Determine the severity class based on the severity value
            switch ($vuln.Severity) {
                5 { $severityClass = "severity-5" }
                4 { $severityClass = "severity-4" }
                3 { $severityClass = "severity-3" }
                2 { $severityClass = "severity-2" }
                1 { $severityClass = "severity-1" }
                default { $severityClass = "" } # Handle any unexpected values gracefully
            }

            $html += @"
            <div class="vulnerability" data-category="$($vuln.Category)">
                <h3 class="$severityClass">$($vuln.Title)</h3>
                <div class="details">
                    <p><strong>Severity:</strong> <span class="severity">$($vuln.Severity)</span></p>
                    <p><strong>Category:</strong> $($vuln.Category)</p>
                    <p><strong>Description:</strong> $($vuln.Description)</p>
                    <p><strong>Impact:</strong> $($vuln.Impact)</p>
                    <p><strong>Solution:</strong> $($vuln.Solution)</p>
                    <p><strong>URL:</strong> $($vuln.Url -replace "`n", "<br>")</p>
                    <p><strong>Parameter(s):</strong> $($vuln.Parameter)</p>
                    <p><strong>Payload(s):</strong> $($vuln.Payload -replace "`n", "<br>")</p>
                </div>
            </div>
"@
        }

        $html += @"
        </body>
        </html>
"@

        # Determine the output filename for HTML
        if (-not $HtmlOutputFile) {
            $HtmlOutputFile = "$webApplication.html"
        }

        # Save the HTML to a file
        $html | Out-File -FilePath $HtmlOutputFile -Encoding UTF8

        Write-Output "HTML report generated at $HtmlOutputFile"
    }
}